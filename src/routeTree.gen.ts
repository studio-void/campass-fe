/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DocumentParsingRouteImport } from './routes/document-parsing'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as WikiRouteRouteImport } from './routes/wiki/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WikiIndexRouteImport } from './routes/wiki/index'
import { Route as WikiWikiIdRouteImport } from './routes/wiki/$wikiId'
import { Route as AuthVerificationPendingRouteImport } from './routes/auth/verification-pending'
import { Route as AuthVerificationRouteImport } from './routes/auth/verification'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as AdminSchoolCertificateRouteImport } from './routes/admin/school-certificate'
import { Route as AdminDormStorageRouteImport } from './routes/admin/dorm-storage'
import { Route as AdminDormCheckRouteImport } from './routes/admin/dorm-check'
import { Route as WikiWikiIdHistoryRouteImport } from './routes/wiki/$wikiId.history'
import { Route as WikiWikiIdEditRouteImport } from './routes/wiki/$wikiId.edit'
import { Route as AuthGoogleCallbackRouteImport } from './routes/auth/google/callback'

const DocumentParsingRoute = DocumentParsingRouteImport.update({
  id: '/document-parsing',
  path: '/document-parsing',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const WikiRouteRoute = WikiRouteRouteImport.update({
  id: '/wiki',
  path: '/wiki',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WikiIndexRoute = WikiIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WikiRouteRoute,
} as any)
const WikiWikiIdRoute = WikiWikiIdRouteImport.update({
  id: '/$wikiId',
  path: '/$wikiId',
  getParentRoute: () => WikiRouteRoute,
} as any)
const AuthVerificationPendingRoute = AuthVerificationPendingRouteImport.update({
  id: '/auth/verification-pending',
  path: '/auth/verification-pending',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthVerificationRoute = AuthVerificationRouteImport.update({
  id: '/auth/verification',
  path: '/auth/verification',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSchoolCertificateRoute = AdminSchoolCertificateRouteImport.update({
  id: '/school-certificate',
  path: '/school-certificate',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDormStorageRoute = AdminDormStorageRouteImport.update({
  id: '/dorm-storage',
  path: '/dorm-storage',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDormCheckRoute = AdminDormCheckRouteImport.update({
  id: '/dorm-check',
  path: '/dorm-check',
  getParentRoute: () => AdminRoute,
} as any)
const WikiWikiIdHistoryRoute = WikiWikiIdHistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => WikiWikiIdRoute,
} as any)
const WikiWikiIdEditRoute = WikiWikiIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => WikiWikiIdRoute,
} as any)
const AuthGoogleCallbackRoute = AuthGoogleCallbackRouteImport.update({
  id: '/auth/google/callback',
  path: '/auth/google/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/wiki': typeof WikiRouteRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/document-parsing': typeof DocumentParsingRoute
  '/admin/dorm-check': typeof AdminDormCheckRoute
  '/admin/dorm-storage': typeof AdminDormStorageRoute
  '/admin/school-certificate': typeof AdminSchoolCertificateRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/auth/verification': typeof AuthVerificationRoute
  '/auth/verification-pending': typeof AuthVerificationPendingRoute
  '/wiki/$wikiId': typeof WikiWikiIdRouteWithChildren
  '/wiki/': typeof WikiIndexRoute
  '/auth/google/callback': typeof AuthGoogleCallbackRoute
  '/wiki/$wikiId/edit': typeof WikiWikiIdEditRoute
  '/wiki/$wikiId/history': typeof WikiWikiIdHistoryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/document-parsing': typeof DocumentParsingRoute
  '/admin/dorm-check': typeof AdminDormCheckRoute
  '/admin/dorm-storage': typeof AdminDormStorageRoute
  '/admin/school-certificate': typeof AdminSchoolCertificateRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/auth/verification': typeof AuthVerificationRoute
  '/auth/verification-pending': typeof AuthVerificationPendingRoute
  '/wiki/$wikiId': typeof WikiWikiIdRouteWithChildren
  '/wiki': typeof WikiIndexRoute
  '/auth/google/callback': typeof AuthGoogleCallbackRoute
  '/wiki/$wikiId/edit': typeof WikiWikiIdEditRoute
  '/wiki/$wikiId/history': typeof WikiWikiIdHistoryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/wiki': typeof WikiRouteRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/document-parsing': typeof DocumentParsingRoute
  '/admin/dorm-check': typeof AdminDormCheckRoute
  '/admin/dorm-storage': typeof AdminDormStorageRoute
  '/admin/school-certificate': typeof AdminSchoolCertificateRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/auth/verification': typeof AuthVerificationRoute
  '/auth/verification-pending': typeof AuthVerificationPendingRoute
  '/wiki/$wikiId': typeof WikiWikiIdRouteWithChildren
  '/wiki/': typeof WikiIndexRoute
  '/auth/google/callback': typeof AuthGoogleCallbackRoute
  '/wiki/$wikiId/edit': typeof WikiWikiIdEditRoute
  '/wiki/$wikiId/history': typeof WikiWikiIdHistoryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/wiki'
    | '/admin'
    | '/document-parsing'
    | '/admin/dorm-check'
    | '/admin/dorm-storage'
    | '/admin/school-certificate'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/auth/verification'
    | '/auth/verification-pending'
    | '/wiki/$wikiId'
    | '/wiki/'
    | '/auth/google/callback'
    | '/wiki/$wikiId/edit'
    | '/wiki/$wikiId/history'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/document-parsing'
    | '/admin/dorm-check'
    | '/admin/dorm-storage'
    | '/admin/school-certificate'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/auth/verification'
    | '/auth/verification-pending'
    | '/wiki/$wikiId'
    | '/wiki'
    | '/auth/google/callback'
    | '/wiki/$wikiId/edit'
    | '/wiki/$wikiId/history'
  id:
    | '__root__'
    | '/'
    | '/wiki'
    | '/admin'
    | '/document-parsing'
    | '/admin/dorm-check'
    | '/admin/dorm-storage'
    | '/admin/school-certificate'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/auth/verification'
    | '/auth/verification-pending'
    | '/wiki/$wikiId'
    | '/wiki/'
    | '/auth/google/callback'
    | '/wiki/$wikiId/edit'
    | '/wiki/$wikiId/history'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WikiRouteRoute: typeof WikiRouteRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
  DocumentParsingRoute: typeof DocumentParsingRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  AuthVerificationRoute: typeof AuthVerificationRoute
  AuthVerificationPendingRoute: typeof AuthVerificationPendingRoute
  AuthGoogleCallbackRoute: typeof AuthGoogleCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/document-parsing': {
      id: '/document-parsing'
      path: '/document-parsing'
      fullPath: '/document-parsing'
      preLoaderRoute: typeof DocumentParsingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wiki': {
      id: '/wiki'
      path: '/wiki'
      fullPath: '/wiki'
      preLoaderRoute: typeof WikiRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wiki/': {
      id: '/wiki/'
      path: '/'
      fullPath: '/wiki/'
      preLoaderRoute: typeof WikiIndexRouteImport
      parentRoute: typeof WikiRouteRoute
    }
    '/wiki/$wikiId': {
      id: '/wiki/$wikiId'
      path: '/$wikiId'
      fullPath: '/wiki/$wikiId'
      preLoaderRoute: typeof WikiWikiIdRouteImport
      parentRoute: typeof WikiRouteRoute
    }
    '/auth/verification-pending': {
      id: '/auth/verification-pending'
      path: '/auth/verification-pending'
      fullPath: '/auth/verification-pending'
      preLoaderRoute: typeof AuthVerificationPendingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/verification': {
      id: '/auth/verification'
      path: '/auth/verification'
      fullPath: '/auth/verification'
      preLoaderRoute: typeof AuthVerificationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/school-certificate': {
      id: '/admin/school-certificate'
      path: '/school-certificate'
      fullPath: '/admin/school-certificate'
      preLoaderRoute: typeof AdminSchoolCertificateRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dorm-storage': {
      id: '/admin/dorm-storage'
      path: '/dorm-storage'
      fullPath: '/admin/dorm-storage'
      preLoaderRoute: typeof AdminDormStorageRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dorm-check': {
      id: '/admin/dorm-check'
      path: '/dorm-check'
      fullPath: '/admin/dorm-check'
      preLoaderRoute: typeof AdminDormCheckRouteImport
      parentRoute: typeof AdminRoute
    }
    '/wiki/$wikiId/history': {
      id: '/wiki/$wikiId/history'
      path: '/history'
      fullPath: '/wiki/$wikiId/history'
      preLoaderRoute: typeof WikiWikiIdHistoryRouteImport
      parentRoute: typeof WikiWikiIdRoute
    }
    '/wiki/$wikiId/edit': {
      id: '/wiki/$wikiId/edit'
      path: '/edit'
      fullPath: '/wiki/$wikiId/edit'
      preLoaderRoute: typeof WikiWikiIdEditRouteImport
      parentRoute: typeof WikiWikiIdRoute
    }
    '/auth/google/callback': {
      id: '/auth/google/callback'
      path: '/auth/google/callback'
      fullPath: '/auth/google/callback'
      preLoaderRoute: typeof AuthGoogleCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface WikiWikiIdRouteChildren {
  WikiWikiIdEditRoute: typeof WikiWikiIdEditRoute
  WikiWikiIdHistoryRoute: typeof WikiWikiIdHistoryRoute
}

const WikiWikiIdRouteChildren: WikiWikiIdRouteChildren = {
  WikiWikiIdEditRoute: WikiWikiIdEditRoute,
  WikiWikiIdHistoryRoute: WikiWikiIdHistoryRoute,
}

const WikiWikiIdRouteWithChildren = WikiWikiIdRoute._addFileChildren(
  WikiWikiIdRouteChildren,
)

interface WikiRouteRouteChildren {
  WikiWikiIdRoute: typeof WikiWikiIdRouteWithChildren
  WikiIndexRoute: typeof WikiIndexRoute
}

const WikiRouteRouteChildren: WikiRouteRouteChildren = {
  WikiWikiIdRoute: WikiWikiIdRouteWithChildren,
  WikiIndexRoute: WikiIndexRoute,
}

const WikiRouteRouteWithChildren = WikiRouteRoute._addFileChildren(
  WikiRouteRouteChildren,
)

interface AdminRouteChildren {
  AdminDormCheckRoute: typeof AdminDormCheckRoute
  AdminDormStorageRoute: typeof AdminDormStorageRoute
  AdminSchoolCertificateRoute: typeof AdminSchoolCertificateRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDormCheckRoute: AdminDormCheckRoute,
  AdminDormStorageRoute: AdminDormStorageRoute,
  AdminSchoolCertificateRoute: AdminSchoolCertificateRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WikiRouteRoute: WikiRouteRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  DocumentParsingRoute: DocumentParsingRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  AuthVerificationRoute: AuthVerificationRoute,
  AuthVerificationPendingRoute: AuthVerificationPendingRoute,
  AuthGoogleCallbackRoute: AuthGoogleCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
